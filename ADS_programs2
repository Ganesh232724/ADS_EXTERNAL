BST:
Binary search insertion and deletion
#include <stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node * lchild, *rchild;
};
struct node *root=NULL;
struct node* createnode(int item)
{
                struct node* newnode;
                newnode=(struct node*)malloc(sizeof(struct node));
	   newnode->data=item;
	   newnode->lchild=NULL;
	   newnode->rchild=NULL;
}
    
struct node* insert_NODE(struct node* t, int item)
{
	 struct node *newnode;
	 if(t==NULL)
	 {
	       t=createnode(item);
	 }
	 else if(item==t->data)
	 { 
	      printf("element already exists");
	 }   
	 else if(item>t->data)
	 {
	       t->rchild=insert_NODE(t->rchild, item);
	 }
	 else
	 {
	       t->lchild=insert_NODE(t->lchild, item);
	 }
	 return t;
}


struct node* succes(struct node *ptr)
 {
    struct node *ptr1=ptr->rchild;
    if(ptr1!=NULL)
    {
	  while(ptr1->lchild!=NULL)
	     ptr1=ptr1->lchild;
	}
	return(ptr1);
 }
void delete_NODE(int item)
{
int flag=0, option;
struct node *parent,*ptr=root;
struct node *ptr1;
 while(ptr!=NULL && flag==0)
  {
	  if(item < ptr->data)
	   {
                           parent=ptr;
		 ptr=ptr->lchild;
	   }
	   else if(item > ptr->data)
	   {
		 parent=ptr;
		 ptr=ptr->rchild;
	   }
	   else
	   {         flag=1;
	   }
     }
     if(flag==0)
     {	     printf("item does not exis:no deletion");
	     ptr=NULL;
     }
     if( ptr->lchild==NULL&&ptr->rchild==NULL)
		option=1;
   else if(ptr->lchild!=NULL&&ptr->rchild!=NULL)
		option=3;
	else
		option =2;
  if(option==1)
    {
	 if(parent->lchild==ptr)
		parent->lchild =NULL;
	else
                          parent->rchild =NULL;
              free (ptr);    
    }
  else if(option==2)
     {
            if(parent->lchild ==ptr)
	 {
	    if(ptr->lchild ==NULL)
	          parent->lchild =ptr->rchild;
	   else
	         parent->lchild =ptr->lchild;
	  }
              else
             {
	    if(parent->rchild ==ptr)
	    {
	         if(ptr->lchild ==NULL)
	               parent->rchild =ptr->rchild;
	         else
	               parent->rchild =ptr->lchild;
	    }
	   free (ptr);
             }
      }
    else  					 //option=3
    {	ptr1= succes(ptr);
	int item1=ptr1->data;
	delete_NODE(item1);
	ptr->data=item1;
    }
  }
void inorder(struct node *ptr)
{
	 if(ptr!=NULL)
	 {
	   inorder(ptr->lchild);
	   printf("%d   ", ptr->data);
	   inorder(ptr->rchild);	
           }
}
int main()
{
	 int item;
	 int choice;
	 while(1)
	 {
	    printf("\n1)insertion in binarysearch tree\t2)delete \t3)inorder\t4)exit"); 
	    printf("\nEnter your choice:");
	    scanf("%d", &choice);
	    switch(choice)
	    {
		  case 1:
			printf("\n\nEnter a number to insert:");
			scanf("%d", &item);
			root=insert_NODE(root, item);
			break;
		   case 2:
			printf("\n\nEnter a number to delete:");
			scanf("%d", &item);
			delete_NODE(item);
			 break;
		  case 3:
			 printf("\nThe elements in inorder are:");
			 inorder(root);
			 break;
		  case 4:
			 exit(0);
	    }
   }
   return 0;
}
---------------------------------------------------------------------------------

2.AVL tree construction:
#include <stdio.h>
#include <stdlib.h>
 struct Node
{
    int key;
    struct Node *left;
    struct Node *right;
    int height;
};
 int getHeight(struct Node *n){
    if(n==NULL)
        return 0;
    return n->height;
}
 struct Node *createNode(int key){
    struct Node* node = (struct Node *) malloc(sizeof(struct Node));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1;
    return node;
}
 int max (int a, int b){
    return (a>b)?a:b;
} 
int getBalanceFactor(struct Node * n){
    if(n==NULL){
        return 0;
    }
    return getHeight(n->left) - getHeight(n->right);
}
 




struct Node* rightRotate(struct Node* y){
    struct Node* x = y->left;
    struct Node* T2 = x->right;
    x->right = y;
    y->left = T2;
    x->height = max(getHeight(x->right), getHeight(x->left)) + 1;
    y->height = max(getHeight(y->right), getHeight(y->left)) + 1;
    return x;
}
 
struct Node* leftRotate(struct Node* x){
    struct Node* y = x->right;
    struct Node* T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = max(getHeight(x->right), getHeight(x->left)) + 1;
    y->height = max(getHeight(y->right), getHeight(y->left)) + 1;
    return y;
}
 
struct Node *insert(struct Node* node, int key)
{
    if (node == NULL)
        return  createNode(key);
    if (key < node->key)
        node->left  = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    node->height = 1 + max(getHeight(node->left), getHeight(node->right));
    int bf = getBalanceFactor(node);
    // Left Left Case
        if(bf>1 && key < node->left->key){
            return rightRotate(node);
}
    // Right Right Case
        if(bf<-1 && key > node->right->key){
            return leftRotate(node);       }
    // Left Right Case
    if(bf>1 && key > node->left->key){
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }
    // Right Left Case
    if(bf<-1 && key < node->right->key){
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }
    return node;
}
 
void preOrder(struct Node *root)
{
    if(root != NULL)
    {
        printf("%d ", root->key);
        preOrder(root->left);
        preOrder(root->right);
    }
}
 int main(){
    struct Node * root = NULL;
     root = insert(root, 1);
    root = insert(root, 2);
    root = insert(root, 4);
    root = insert(root, 5);
    root = insert(root, 6);
    root = insert(root, 3);
    preOrder(root);
    return 0;
}
----------------------------------------------------------------------------------
3.quick sort
#include<stdio.h>
void read();
void display();
void quicksort(int,int);
void swap(int*, int*);
int n, a[20];
int main()
{
  read();
  quicksort(0,n-1);
  display();
}
void read()
	{
        int i;
      	printf("enter n");
    	scanf("%d",&n);
	    printf("enter array elements");
	    for(i=0;i<n;i++)
	    {
	  	   scanf("%d",&a[i]);
	    }
	}
void display()
{
      int i;
      if(n>0)
      {
       for(i=0;i<n;i++)
	  {
	  	printf("%d ",a[i]);
	  }
}
else
	   printf("there are no elements in the array");
}

void swap(int *x, int *y)
{
	int temp;
	temp=*x;
	*x=*y;
	*y=temp;
}
void quicksort(int lb,int ub)
{
     int i, j;
   int p, temp;
   if(lb<ub)
   {
   p=lb;
   i=lb;
   j=ub;
   while(i<j)
   {
      while(a[i] <= a[p] && i<ub )
        i++;
      while(a[j]>a[p])
	    j--;
      if(i<j)
       swap(&a[i], &a[j]);
  }
  swap(&a[p], &a[j]); 
  quicksort(lb, j-1);
  quicksort(j+1, ub); 
 }
}
------------------------------------------------------------------------------
4.Merge sort:
#include <stdio.h>
int a[10];
int n;
void read()
{
	printf("Enter the size");
   	scanf("%d", &n);
	printf("enter elements");
	for(int i=0;i<n;i++)
  		 scanf("%d", &a[i]);
}
void display()
{
	printf("sorted elements");
	for(int i=0;i<n;i++)
		printf("%d", a[i]);
}
void merge(int lb, int mid, int ub)
{
	int i=lb, j=mid+1, k=lb, temp[20];
	while((i<=mid)&&(j<=ub))
	{
		if(a[i]<a[j])
		{
			temp[k]=a[i];
			i++;
		}
		else
		{
			temp[k]=a[j];
			j++;
		}
		k++;
	}
	if(i>mid)
	{
		while(j<=ub)
		{
			temp[k]=a[j];
			j++;
			k++;
		}
	}
	else
	{
		while(i<=mid)
		{
			temp[k]=a[i];
			i++;
			k++;
		}
	}
	for(i=lb; i<k; i++)
		a[i]=temp[i];
}
void msort(int lb, int ub)
{
	int mid;
	if(lb<ub)
	{
		mid=(lb+ub)/2;
		msort(lb,mid);
		msort(mid+1,ub);
		merge(lb,mid,ub);
	}
}

int main()
{
	read();
	msort(0,n-1);
	display();
	return 0;
}

---------------------------------------------------------------------------
5.Heap sort:
#include<stdio.h>
void heapify(int [],int, int);
void heapsort(int [], int);
void print_array(int [], int);
int main()
{
    int arr[20];
    int n;
    printf("enter n and array values");
    scanf("%d", &n);
    for(int i=1; i<=n; i++)
    scanf("%d", &arr[i]);
    printf("\nArray before sorting:\n");
    print_array(arr, n);
     heapsort(arr, n);
    printf("\n\nArray after sorting:\n");
    print_array(arr, n);
    return 0;
}
 
void heapsort(int arr[], int n)
{
    // build the binary max heap
    for (int i = n / 2 ; i > 0; i--)
    {
        heapify(arr, n, i);
    }
 
    // sort the max heap
    for (int i = n; i > 0; i--)
    {        // swap the root node and the last leaf node
        int temp = arr[i];
        arr[i] = arr[1];
        arr[1] = temp;
 
        // again heapify the max heap from the root 
        heapify(arr, i-1, 1);
    }
}


/* heapify the subtree with root i */
void heapify(int  arr[], int n, int i)
{
    // store largest as the root element
    int largest = i;
 
    int left = 2 * i ;
    int right  = 2 * i +1;
 
    // now check whether the right and left right is larger than the root or not
    if (left <= n && arr[left] > arr[largest])
    {
        largest = left;
    }
 
    if (right <= n && arr[right] > arr[largest])
    {
        largest = right;
    }
     // if the root is smaller than the children then swap it with the largest children's value
    if (largest != i)
    {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
         // again heapify that side of the heap where the root has gone
        heapify(arr, n, largest);
    }
}
 /* printf the array */
void print_array(int arr[], int n)
{
    for (int i = 1; i <= n; i++)
    {
        printf("%d  ", arr[i]);
    } 
}
--------------------------------------------------------------------------------------------
6.Fibanacci_search:
#include <stdio.h>
int a[20], n, f[20], k, s;
int min(int x, int y)
{
    if (x<y)
    return x;
    else 
    return y;
}
void read()
{
    printf("Enter the value n");
    scanf("%d", &n);
    printf("enter %d values", n);
    for(int i=0; i<n; i++)
    {
        scanf("%d", &a[i]);
    }
    printf("enter target element");
    scanf("%d", &s);
}
int fibonacciseries()
{   k=1;
    f[0]=0;
    f[1]=1;
    while (f[k]<n)
    {
        k++; 
        f[k] = f[k-1] + f[k-2];
    }
}
int fibonacciSearch()
{
    int offset=-1;
    while(1)
    {
      if (f[k-2]==0) break;     
      int i = min(offset + f[k-2], n-1);
      if (s == a[i])
       return i; 
      else if (s > a[i])
          {
          k = k-1;
          offset = i;
          }
      else k = k-2;  
    }
    return -1;
}

int main(void)
{
    read();
    fibonacciseries();
   int ind = fibonacciSearch();
  if(ind>=0)
    printf("Found at index: %d",ind);
  else
    printf("%d isn't present in the array",s);
    return 0;
}
------------------------------------------------------------------------
7.BFS,DFS:
#include<stdio.h>
int q[20],top=-1,front=-1,rear=-1,a[20][20],vis[20],stack[20];
int delete();
void add(int item);
void bfs(int s,int n);
void dfs(int s,int n);
void push(int item);
int pop();
void main()
{
int n,i,s,ch,j;
char c,dummy;
printf("ENTER THE NUMBER VERTICES ");
scanf("%d",&n);
for(i=1;i<=n;i++)
{
      for(j=1;j<=n;j++)
      {
                printf("ENTER 1 IF %d HAS A NODE WITH %d ELSE 0 ",i,j);
               scanf("%d",&a[i][j]);
       }
}
printf("THE ADJACENCY MATRIX IS\n");
for(i=1;i<=n;i++)
{
      for(j=1;j<=n;j++)
     {
                 printf(" %d",a[i][j]);
      }
      printf("\n");
}
do
{
           for(i=1;i<=n;i++)
                 vis[i]=0;
          printf("\nMENU");
          printf("\n1.B.F.S");
          printf("\n2.D.F.S");
          printf("\nENTER YOUR CHOICE");
          scanf("%d",&ch);
          printf("ENTER THE SOURCE VERTEX :");
          scanf("%d",&s);

          switch(ch)
         {
                 case 1:bfs(s,n);
                              break;
                 case 2: dfs(s,n);
                              break;
          }
          printf("DO U WANT TO CONTINUE(Y/N) ? ");
          scanf("%c",&dummy);
          scanf("%c",&c);
}while((c=='y')||(c=='Y'));
}


//**************BFS(breadth-first search) code**************//
void bfs(int s,int n)
{
int p,i;
add(s);
vis[s]=1;
p=delete();
if(p!=0)
printf(" %d",p);
while(p!=0)
{
for(i=1;i<=n;i++)
if((a[p][i]!=0)&&(vis[i]==0))
{
     add(i);
     vis[i]=1;
}
p=delete();
if(p!=0)
printf(" %d",p);
}
}
void add(int item)
{
if(rear==19)
     printf("QUEUE FULL");
else
{
if(rear==-1)
{
	q[++rear]=item;
	front++;
}
else
	q[++rear]=item;
}
}
int delete()
{
int k;
if((front>rear)||(front==-1))
	return(0);
else
{
	k=q[front++];
	return(k);
}
}


//***************DFS(depth-first search) code******************//
void dfs(int s,int n)
{
int i,k;
push(s);
vis[s]=1;
k=pop();
if(k!=0)
	printf(" %d ",k);
while(k!=0)
{
	for(i=1;i<=n;i++)
	if((a[k][i]!=0)&&(vis[i]==0))
	{
		push(i);
		vis[i]=1;
	}
	k=pop();
	
	if(k!=0)
	      printf(" %d ",k);
}
}
void push(int item)
{
	if(top==19)
		printf("Stack overflow ");
	else
		stack[++top]=item;
}
int pop()
{
	int k;
	if(top==-1)
		return(0);
	else
	{
		k=stack[top--];
		return(k);
	}
}
------------------------------------------------------------------------------
8.TOPOLOGICAL SORT:
#include <stdio.h>
 
int main(){
int i,j,k,n,a[10][10],indeg[10],flag[10],count=0;
 
printf("Enter the no of vertices:\n");
scanf("%d",&n);
 
printf("Enter the adjacency matrix:\n");
for(i=0;i<n;i++){
printf("Enter row %d\n",i);
for(j=0;j<n;j++)
scanf("%d",&a[i][j]);
}
 
for(i=0;i<n;i++){
        indeg[i]=0;
        flag[i]=0;
    }
 
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
            indeg[i]=indeg[i]+a[j][i];
 
    printf("\nThe topological order is:");
 
    while(count<n)
    {
        for(k=0;k<n;k++)
        {
            if((indeg[k]==0) && (flag[k]==0))
            {
                printf("%d ",k);
                flag [k]=1;
                count++;
                for(i=0;i<n;i++)
                {
                   if(a[k][i]==1)
                      indeg[i]--;
                }
            }        
         }
        
        
    }
 
    return 0;
}


